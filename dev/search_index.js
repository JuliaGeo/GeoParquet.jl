var documenterSearchIndex = {"docs":
[{"location":"#GeoParquet","page":"Home","title":"GeoParquet","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Adding geospatial data to Parquet. Follows the GeoParquet v0.4 spec.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Reading geoparquet files can be done with read.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import GeoParquet as GP\n\njulia> url = \"https://github.com/opengeospatial/geoparquet/raw/v0.4.0/examples/example.parquet\"\njulia> fn = download(url)\njulia> df = GP.read(fn)\n5×6 DataFrame\n Row │ pop_est    continent      name                      iso_a3   gdp_md_est    geometry\n     │ Int64?     String?        String?                   String?  Float64?      WellKnow…\n─────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │    920938  Oceania        Fiji                      FJI        8374.0      WellKnownBinary{Geom, Vector{UIn…\n   2 │  53950935  Africa         Tanzania                  TZA      150600.0      WellKnownBinary{Geom, Vector{UIn…\n   3 │    603253  Africa         W. Sahara                 ESH         906.5      WellKnownBinary{Geom, Vector{UIn…\n   4 │  35623680  North America  Canada                    CAN           1.674e6  WellKnownBinary{Geom, Vector{UIn…\n   5 │ 326625791  North America  United States of America  USA           1.856e7  WellKnownBinary{Geom, Vector{UIn…","category":"page"},{"location":"","page":"Home","title":"Home","text":"Writing requires Table like input with geometry columns that are WellKnownBinary from GeoFormatTypes.jl, or geometries that support GeoInterface.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> GeoParquet.write(\"test.parquet\", df, (:geometry,))\ntest.parquet","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#API-Documentation","page":"Home","title":"API Documentation","text":"","category":"section"},{"location":"#GeoParquet.read-Tuple{GeoParquet.Parquet2Driver, Union{AbstractString, FilePathsBase.AbstractPath, Parquet2.FileManager}}","page":"Home","title":"GeoParquet.read","text":"read(fn; kwargs...)::DataFrame\n\nRead a GeoParquet file as DataFrame. Kwargs are passed to the Parquet2.Dataset constructor.\n\n\n\n\n\n","category":"method"},{"location":"#GeoParquet.todict-Tuple{JSON3.Object}","page":"Home","title":"GeoParquet.todict","text":"Adapted from copy in JSON3, but with String keys instead of Symbols.\n\n\n\n\n\n","category":"method"},{"location":"#GeoParquet.write","page":"Home","title":"GeoParquet.write","text":"write(ofn, t, columns=(:geom), crs::Union{GFT.ProjJSON,Nothing}=nothing, bbox::Union{Nothing,Vector{Float64}}=nothing; kwargs...)\n\nWrite a dataframe with a geometry column to a Parquet file. Returns ofn on succes. Keyword arguments are passed to Parquet2 writefile method. The geometry column should be a Vector{GeoFormat.WellKnownBinary} or its elements should support GeoInterface. You can construct one with WellKnownGeometry for geometries that support GeoInterface.\n\n\n\n\n\n","category":"function"}]
}
